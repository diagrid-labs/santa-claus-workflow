{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "SantaClausWorkflow",
  "steps": [
    {
      "title": "Run the solution",
      "description": "### Intro\r\n\r\n> This demo is created for [Festive Tech Calendar 2023](https://festivetechcalendar.com/).\r\n\r\nSanta Claus is using [Dapr](https://dapr.io/) to ensure everyone gets their Christmas gift on time in the holiday season. He has a large and diverse team of elves who are responsible for different tasks such as making toys, wrapping gifts, and loading the sleigh. Each task is an activity that can be executed by one or more elves. Santa needs to coordinate the activities of all the elves in a reliable and efficient way.\r\n\r\nThat's where [Dapr Workflow](https://docs.dapr.io/developing-applications/building-blocks/workflow/workflow-overview/) comes in. Santa defines his workflow in code (he prefers C#, but Python or Java can also be used) where he specifies the sequence and conditions of the activities. Dapr Workflow takes care of the orchestration logic, fault tolerance, and scalability of the workflow, so Santa can focus on the business logic is assured of optimal elf efficiency.\r\n\r\n### Prerequisites\r\n\r\n1. [.NET 7 SDK](https://dotnet.microsoft.com/download/dotnet/7.0)\r\n2. [Docker Desktop](https://www.docker.com/products/docker-desktop/)\r\n3. [Dapr CLI](https://docs.dapr.io/getting-started/install-dapr-cli/)\r\n   - Ensure that you're using v1.12 (or higher) of the Dapr runtime and the CLI.\r\n4. A REST client, such as [cURL](https://curl.se/), or the VSCode [REST client extension](https://marketplace.visualstudio.com/items?itemName=humao.rest-client).\r\n\r\n\r\n### Running locally\r\n\r\nExecute these commands in order to run the workflow application locally:\r\n\r\n1. Build the .NET solution:\r\n\r\n>> dotnet build\r\n\r\n2. Use the Dapr CLI to run the web app with the workflows:\r\n\r\n>> dapr run -f .\r\n\r\nUse the HTTP endpoints in the [local-workflow-tests.http](local-workflow-tests.http) to start a workflow and get the status."
    },
    {
      "file": "local-workflow-tests.http",
      "description": "### local-workflow-tests - start the SantaClausWorkflow workflow",
      "line": 7
    },
    {
      "file": "local-workflow-tests.http",
      "description": "### local-workflow-tests - get workflow status",
      "line": 28
    },
    {
      "file": "SantaClausWorkflow/SantaClausWorkflow.csproj",
      "description": "### SantaClausWorkflow.csproj\r\n\r\nThe project file has a reference to the `Dapr.Workflow` NuGet package. This contians the Dapr workflow base types which are needed to write the workflows in C#.",
      "line": 11
    },
    {
      "file": "SantaClausWorkflow/Program.cs",
      "description": "### Program.cs - Extension methods\r\n\r\nThe `AddDaprWorkflow` extension method is used to register the workflows and workflow activities.\r\n\r\nSince this application also contains code to start the workflow, the `AddDaprWorkflowClient` method is also used.\r\n\r\nThe `AddDaprClient` extension method is not required for Dapr Workflow, but this application uses the Dapr client SDK for interacting with a state store in some workflow activities.",
      "line": 8
    },
    {
      "file": "SantaClausWorkflow/Program.cs",
      "description": "### Program.cs - DaprWorkflowClient instance\r\n\r\nA `DaprWorkflowClient` instance is retrieved from the `ServiceProvider`. ",
      "line": 50
    },
    {
      "file": "SantaClausWorkflow/Program.cs",
      "description": "### Program.cs - /start endpoint\r\n\r\nThe `workflowClient` instance is used when an HTTP POST is made to the `/start` endpoint where a new `SantaClausWorkflow` is scheduled. The array of wishes is provided as the input argument.",
      "line": 52
    },
    {
      "file": "SantaClausWorkflow/Workflows/SantaClausWorkflow.cs",
      "description": "### SantaClausWorkflow\r\n\r\nThe `SantaClausWorkflow` inherits from the `Workflow` base class. The workflow takes an array of `ChristmasWishInput` objects and has an array of `string` as the output.",
      "line": 5
    },
    {
      "file": "SantaClausWorkflow/Workflows/SantaClausWorkflow.cs",
      "description": "### SantaClausWorkflow - RunAsync\r\n\r\nThe `RunAsync` method contains the workflow logic. This workflow uses the fan-out/fan-in pattern. For each of the wishes in the array, a new  task is created to schedule the `ChristmasWishWorkflow` and is added to the `christmasWishWorkflowTasks` list.",
      "line": 7
    },
    {
      "file": "SantaClausWorkflow/Workflows/SantaClausWorkflow.cs",
      "description": "### SantaClausWorkflow - Task.WhenAll\r\n\r\nThis is the moment when all `christmasWishWorkflowTasks` are scheduled and executed. The `SantaClausWorkflow` will wait with further execution until all the `ChristmasWishWorkflow` are complete.",
      "line": 18
    },
    {
      "file": "SantaClausWorkflow/Workflows/SantaClausWorkflow.cs",
      "description": "### SantaClausWorkflow - Call DeliverGiftsActivity\r\n\r\nOnce all the gifts are ready and packed on the sleigh, Santa can deliver the gifts so the `DeliverGiftsActivity` is scheduled.",
      "line": 22
    },
    {
      "file": "SantaClausWorkflow/Workflows/SantaClausWorkflow.cs",
      "description": "### SantaClausWorkflow - return messages\r\n\r\nThe `SantaClausWorkflow` returns an array of messages that come from the individual `ChristmasWishWorkflow` instances.",
      "line": 24
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow\r\n\r\nThe `ChristmasWishWorkflow` contains the shared logic that is executed for every wish.",
      "line": 6
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - Call NaughtyOrNiceActivity",
      "line": 13
    },
    {
      "file": "SantaClausWorkflow/Activities/NaughtyOrNiceActivity.cs",
      "description": "### NaughtyOrNiceActivity",
      "line": 5
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - NaughtyOrNice result",
      "line": 18
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - Call RegisterWishActivity",
      "line": 25
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - Call AssignWorkbenchActivity",
      "line": 30
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - Get workflow for gift type",
      "line": 33
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - GiftWorkflowMap Dictionary",
      "line": 64
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - CallChildWorkflow for the gift type",
      "line": 38
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - Call WrapGiftActivity",
      "line": 46
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - Call PutGiftInSleighActivity",
      "line": 54
    },
    {
      "file": "SantaClausWorkflow/Workflows/ChristmasWishWorkflow.cs",
      "description": "### ChristmasWishWorkflow - return message\r\n\r\nReturn the specific gift workflow message back to the parent workflow (`SantaClausWorkflow`).",
      "line": 56
    },
    {
      "file": "SantaClausWorkflow/Workflows/BookWorkflow.cs",
      "description": "### BookWorkflow\r\n\r\nThe `BookWorkflow` contains the orchestration logic for creating a new book. It uses generic `GiftWorkflowInput` and `GiftWorkflowOutput` types that are also used for the other specific gift workflows.",
      "line": 5
    },
    {
      "file": "SantaClausWorkflow/Workflows/BookWorkflow.cs",
      "description": "### BookWorkflow - Call DetermineBookContentActivity",
      "line": 14
    },
    {
      "file": "SantaClausWorkflow/Activities/DetermineBookContentActivity.cs",
      "description": "### DetermineBookContentActivity",
      "line": 7
    },
    {
      "file": "SantaClausWorkflow/Workflows/BookWorkflow.cs",
      "description": "### BookWorkflow - fan-out/fan-in for WritePageActivity",
      "line": 26
    },
    {
      "file": "SantaClausWorkflow/Workflows/BookWorkflow.cs",
      "description": "### BookWorkflow - Call BindBookActivity",
      "line": 34
    },
    {
      "file": "SantaClausWorkflow/Workflows/BookWorkflow.cs",
      "description": "### BookWorkflow - return message\r\n\r\nReturn a message back to the parent workflow (`ChristmasGiftWorkflow`).",
      "line": 37
    },
    {
      "file": "SantaClausWorkflow/Workflows/WoodenToyWorkflow.cs",
      "description": "### WoodenToyWorkflow\r\n\r\nThe `WoodenToyWorkflow` contains all the logic to build a new wooden toy as a gift. It uses generic `GiftWorkflowInput` and `GiftWorkflowOutput` types that are also used for the other specific gift workflows.",
      "line": 5,
      "selection": {
        "start": {
          "line": 3,
          "character": 126
        },
        "end": {
          "line": 3,
          "character": 144
        }
      }
    },
    {
      "file": "SantaClausWorkflow/Workflows/WoodenToyWorkflow.cs",
      "description": "### WoodenToyWorkflow - Call LookupPartsActivity",
      "line": 12
    },
    {
      "file": "SantaClausWorkflow/Workflows/WoodenToyWorkflow.cs",
      "description": "### WoodenToyWorkflow - fan-out/fan-in for CollectPartActivity",
      "line": 21
    },
    {
      "file": "SantaClausWorkflow/Workflows/WoodenToyWorkflow.cs",
      "description": "### WoodenToyWorkflow - Call AssembleToyActivity",
      "line": 29
    },
    {
      "file": "SantaClausWorkflow/Workflows/WoodenToyWorkflow.cs",
      "description": "### WoodenToyWorkflow - Call PaintToyActivity",
      "line": 34
    },
    {
      "file": "SantaClausWorkflow/Workflows/WoodenToyWorkflow.cs",
      "description": "### WoodenToyWorkflow - return message",
      "line": 37
    },
    {
      "file": "SantaClausWorkflow/Workflows/CatalystEarlyAccessWorkflow.cs",
      "description": "### CatalystEarlyAccessWorkflow\r\n\r\nThe `CatalystEarlyAccessWorkflow` contains one activity that returns a link to get early access to Diagrid Catalyst. It uses generic `GiftWorkflowInput` and `GiftWorkflowOutput` types that are also used for the other specific gift workflows.",
      "line": 5
    }
  ]
}